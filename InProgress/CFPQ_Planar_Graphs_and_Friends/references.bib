@inproceedings{Azimov,
 author = {Azimov, Rustam and Grigorev, Semyon},
 title = {Context-free Path Querying by Matrix Multiplication},
 booktitle = {Proceedings of the 1st ACM SIGMOD Joint International Workshop on Graph Data Management Experiences \& Systems (GRADES) and Network Data Analytics (NDA)},
 series = {GRADES-NDA '18},
 year = {2018},
 isbn = {978-1-4503-5695-4},
 location = {Houston, Texas},
 pages = {5:1--5:10},
 articleno = {5},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/3210259.3210264},
 doi = {10.1145/3210259.3210264},
 acmid = {3210264},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {GPGPU, context-free grammar, context-free path querying, graph databases, matrix multiplication, transitive closure},
} 

@INPROCEEDINGS{8249039,
author={P. G. {Bradford}},
booktitle={2017 IEEE 8th Annual Ubiquitous Computing, Electronics and Mobile Communication Conference (UEMCON)},
title={Efficient exact paths for dyck and semi-dyck labeled path reachability (extended abstract)},
year={2017},
volume={},
number={},
pages={247-253},
keywords={computational complexity;directed graphs;formal languages;graph theory;matrix multiplication;reachability analysis;efficient exact paths;weighted digraph;exact path length problem;exact path problem;original edge weights;path solutions;labeled digraph;semiDyck languages;Dyck languages;labeled path problems;Grammar;Heuristic algorithms;Jacobian matrices;Costing;Algorithm design and analysis;Shortest path problem},
doi={10.1109/UEMCON.2017.8249039},
ISSN={},
month={Oct},}

@article{10.1145/1328897.1328460,
author = {Chaudhuri, Swarat},
title = {Subcubic Algorithms for Recursive State Machines},
year = {2008},
issue_date = {January 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {43},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/1328897.1328460},
doi = {10.1145/1328897.1328460},
journal = {SIGPLAN Not.},
month = jan,
pages = {159–169},
numpages = {11},
keywords = {cubic bottleneck, transitive closure, interprocedural analysis, context-free languages, recursive state machines, CFL-reachability, pushdown systems}
}


@inproceedings{10.1145/1328438.1328460,
author = {Chaudhuri, Swarat},
title = {Subcubic Algorithms for Recursive State Machines},
year = {2008},
isbn = {9781595936899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1328438.1328460},
doi = {10.1145/1328438.1328460},
booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {159-169},
numpages = {11},
keywords = {cubic bottleneck, interprocedural analysis, pushdown systems, recursive state machines, transitive closure, CFL-reachability, context-free languages},
location = {San Francisco, California, USA},
series = {POPL '08}
}




@article{10.1145/2714064.2660213,
author = {Zhang, Qirun and Xiao, Xiao and Zhang, Charles and Yuan, Hao and Su, Zhendong},
title = {Efficient Subcubic Alias Analysis for C},
year = {2014},
issue_date = {December 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/2714064.2660213},
doi = {10.1145/2714064.2660213},
journal = {SIGPLAN Not.},
month = oct,
pages = {829--845},
numpages = {17},
keywords = {cfl-reachability, alias analysis}
}

@article{Valiant:1975:GCR:1739932.1740048,
 author = {Valiant, Leslie G.},
 title = {General Context-free Recognition in Less Than Cubic Time},
 journal = {J. Comput. Syst. Sci.},
 issue_date = {April, 1975},
 volume = {10},
 number = {2},
 month = apr,
 year = {1975},
 issn = {0022-0000},
 pages = {308--315},
 numpages = {8},
 url = {http://dx.doi.org/10.1016/S0022-0000(75)80046-8},
 doi = {10.1016/S0022-0000(75)80046-8},
 acmid = {1740048},
 publisher = {Academic Press, Inc.},
 address = {Orlando, FL, USA},
}

@article{Lee:2002:FCG:505241.505242,
 author = {Lee, Lillian},
 title = {Fast Context-free Grammar Parsing Requires Fast Boolean Matrix Multiplication},
 journal = {J. ACM},
 issue_date = {January 2002},
 volume = {49},
 number = {1},
 month = jan,
 year = {2002},
 issn = {0004-5411},
 pages = {1--15},
 numpages = {15},
 url = {http://doi.acm.org/10.1145/505241.505242},
 doi = {10.1145/505241.505242},
 acmid = {505242},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Boolean matrix multiplication, context-free grammar parsing},
}

@inproceedings{Yannakakis,
  title={Graph-theoretic methods in database theory},
  author={Yannakakis, Mihalis},
  booktitle={Proceedings of the ninth ACM SIGACT-SIGMOD-SIGART symposium on Principles of database systems},
  pages={230--242},
  year={1990},
  organization={ACM}
}

@article{doi:10.1137/17M112720X,
author = {Bringmann, Karl and Grandoni, Fabrizio and Saha, Barna and Williams, Virginia Vassilevska},
title = {Truly Subcubic Algorithms for Language Edit Distance and RNA Folding via Fast Bounded-Difference Min-Plus Product},
journal = {SIAM Journal on Computing},
volume = {48},
number = {2},
pages = {481-512},
year = {2019},
doi = {10.1137/17M112720X},
URL = { https://doi.org/10.1137/17M112720X},
eprint = { https://doi.org/10.1137/17M112720X}
}

@article{10.1145/3158118,
author = {Chatterjee, Krishnendu and Choudhary, Bhavya and Pavlogiannis, Andreas},
title = {Optimal Dyck Reachability for Data-Dependence and Alias Analysis},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {POPL},
url = {https://doi.org/10.1145/3158118},
doi = {10.1145/3158118},
journal = {Proc. ACM Program. Lang.},
month = dec,
articleno = {Article 30},
numpages = {30},
keywords = {Dyck reachability, Bidirected graphs, Data-dependence analysis, treewidth, CFL reachability}
}

@inproceedings{10.5555/647903.739284,
author = {Subramanian, Sairam},
title = {A Fully Dynamic Data Structure for Reachability in Planar Digraphs},
year = {1993},
isbn = {3540572732},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of the First Annual European Symposium on Algorithms},
pages = {372–383},
numpages = {12},
series = {ESA '93}
}

@phdthesis{karczmarz2018data,
  title={Data structures and dynamic algorithms for planar graphs},
  author={Karczmarz, Adam},
  pages={9},
  year={2018},
  school={PhD thesis, University of Warsaw}
}

@article{10.1145/300515.300517,
author = {Galil, Zvi and Italiano, Giuseppe F. and Sarnak, Neil},
title = {Fully Dynamic Planarity Testing with Applications},
year = {1999},
issue_date = {Jan. 1999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {46},
number = {1},
issn = {0004-5411},
url = {https://doi.org/10.1145/300515.300517},
doi = {10.1145/300515.300517},
abstract = {This paper introduces compressed certificates for planarity, biconnectivity and triconnectivity in planar graphs, and proves many structural properties of certificates in planar graphs. As an application of our compressed certificates, we develop efficient dynamic planar algorithms. In particular, we consider the following three operations on a planar graph G: (i) insert an edge if the resultant graph remains planar; (ii) delete an edge; and (iii) test whether an edge could be added to the graph without violating planarity. We show how to support each of the above operations in O(n2/3) time, where n is the number of vertices in the graph. The bound for tests and deletions is worst-case, while the bound for  insertions is amortized. This is the first algorithm for this problem with sub-linear running time, and it affirmatively answers a question posed in Epstein et al. [1992]. We use our compressed certificates for biconnectivity and triconnectivity to maintain the biconnected and triconnected components of a dynamic planar graph. The time bounds are the same: O(n2/3) worst-case time per edge deletion, O(n2/3) amortized time per edge insertion, and O(n2/3) amortized time per edge insertion, and O(n2/3)worst-case time to check whether two vertices are either biconnected or triconnected.},
journal = {J. ACM},
month = jan,
pages = {28–91},
numpages = {64},
keywords = {dynamic graph algorithms, planarity testing, planar graphs}
}

@book{kao2008encyclopedia,
  title={Encyclopedia of algorithms},
  author={Kao, Ming-Yang},
  pages={342--343},
  year={2008},
  publisher={Springer Science \& Business Media}
}

@inproceedings{10.5555/1778580.1778635,
author = {Diks, Krzysztof and Sankowski, Piotr},
title = {Dynamic Plane Transitive Closure},
year = {2007},
isbn = {3540755195},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {In this paper we study the problem of transitive closure in dynamic directed plane graphs. We show a dynamic algorithm supporting updates and queries in worst-case \~{O}(√n) time. This is the first known algorithm for this problem with almost linear update time and query time product.},
booktitle = {Proceedings of the 15th Annual European Conference on Algorithms},
pages = {594–604},
numpages = {11},
location = {Eilat, Israel},
series = {ESA'07}
}



@article{10.1145/3158118,
author = {Chatterjee, Krishnendu and Choudhary, Bhavya and Pavlogiannis, Andreas},
title = {Optimal Dyck Reachability for Data-Dependence and Alias Analysis},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {POPL},
url = {https://doi.org/10.1145/3158118},
doi = {10.1145/3158118},
abstract = {A fundamental algorithmic problem at the heart of static analysis is Dyck reachability. The input is a graph where the edges are labeled with different types of opening and closing parentheses, and the reachability information is computed via paths whose parentheses are properly matched. We present new results for Dyck reachability problems with applications to alias analysis and data-dependence analysis. Our main contributions, that include improved upper bounds as well as lower bounds that establish optimality guarantees, are as follows: First, we consider Dyck reachability on bidirected graphs, which is the standard way of performing field-sensitive points-to analysis. Given a bidirected graph with n nodes and m edges, we present: (i)&nbsp;an algorithm with worst-case running time O(m + n · α(n)), where α(n) is the inverse Ackermann function, improving the previously known O(n2) time bound; (ii)&nbsp;a matching lower bound that shows that our algorithm is optimal wrt to worst-case complexity; and (iii)&nbsp;an optimal average-case upper bound of O(m) time, improving the previously known O(m · logn) bound. Second, we consider the problem of context-sensitive data-dependence analysis, where the task is to obtain analysis summaries of library code in the presence of callbacks. Our algorithm preprocesses libraries in almost linear time, after which the contribution of the library in the complexity of the client analysis is only linear, and only wrt the number of call sites. Third, we prove that combinatorial algorithms for Dyck reachability on general graphs with truly sub-cubic bounds cannot be obtained without obtaining sub-cubic combinatorial algorithms for Boolean Matrix Multiplication, which is a long-standing open problem. Thus we establish that the existing combinatorial algorithms for Dyck reachability are (conditionally) optimal for general graphs. We also show that the same hardness holds for graphs of constant treewidth. Finally, we provide a prototype implementation of our algorithms for both alias analysis and data-dependence analysis. Our experimental evaluation demonstrates that the new algorithms significantly outperform all existing methods on the two problems, over real-world benchmarks.},
journal = {Proc. ACM Program. Lang.},
month = dec,
articleno = {30},
numpages = {30},
keywords = {Bidirected graphs, Dyck reachability, Data-dependence analysis, treewidth, CFL reachability}
}

@inproceedings{10.1145/2491956.2462159,
author = {Zhang, Qirun and Lyu, Michael R. and Yuan, Hao and Su, Zhendong},
title = {Fast Algorithms for Dyck-CFL-Reachability with Applications to Alias Analysis},
year = {2013},
isbn = {9781450320146},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491956.2462159},
doi = {10.1145/2491956.2462159},
abstract = {The context-free language (CFL) reachability problem is a well-known fundamental formulation in program analysis. In practice, many program analyses, especially pointer analyses, adopt a restricted version of CFL-reachability, Dyck-CFL-reachability, and compute on edge-labeled bidirected graphs. Solving the all-pairs Dyck-CFL-reachability on such bidirected graphs is expensive. For a bidirected graph with n nodes and m edges, the traditional dynamic programming style algorithm exhibits a subcubic time complexity for the Dyck language with k kinds of parentheses. When the underlying graphs are restricted to bidirected trees, an algorithm with O(n log n log k) time complexity was proposed recently. This paper studies the Dyck-CFL-reachability problems on bidirected trees and graphs. In particular, it presents two fast algorithms with O(n) and O(n + m log m) time complexities on trees and graphs respectively. We have implemented and evaluated our algorithms on a state-of-the-art alias analysis for Java. Results on standard benchmarks show that our algorithms achieve orders of magnitude speedup and consume less memory.},
booktitle = {Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {435–446},
numpages = {12},
keywords = {alias analysis, dyck-cfl-reachability},
location = {Seattle, Washington, USA},
series = {PLDI '13}
}

@article{10.1145/2499370.2462159,
author = {Zhang, Qirun and Lyu, Michael R. and Yuan, Hao and Su, Zhendong},
title = {Fast Algorithms for Dyck-CFL-Reachability with Applications to Alias Analysis},
year = {2013},
issue_date = {June 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2499370.2462159},
doi = {10.1145/2499370.2462159},
abstract = {The context-free language (CFL) reachability problem is a well-known fundamental formulation in program analysis. In practice, many program analyses, especially pointer analyses, adopt a restricted version of CFL-reachability, Dyck-CFL-reachability, and compute on edge-labeled bidirected graphs. Solving the all-pairs Dyck-CFL-reachability on such bidirected graphs is expensive. For a bidirected graph with n nodes and m edges, the traditional dynamic programming style algorithm exhibits a subcubic time complexity for the Dyck language with k kinds of parentheses. When the underlying graphs are restricted to bidirected trees, an algorithm with O(n log n log k) time complexity was proposed recently. This paper studies the Dyck-CFL-reachability problems on bidirected trees and graphs. In particular, it presents two fast algorithms with O(n) and O(n + m log m) time complexities on trees and graphs respectively. We have implemented and evaluated our algorithms on a state-of-the-art alias analysis for Java. Results on standard benchmarks show that our algorithms achieve orders of magnitude speedup and consume less memory.},
journal = {SIGPLAN Not.},
month = jun,
pages = {435–446},
numpages = {12},
keywords = {dyck-cfl-reachability, alias analysis}
}

